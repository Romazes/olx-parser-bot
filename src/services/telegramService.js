import bot, { isUserAllowed } from "./../models/telegramBotModel.js";
import {
  searchOlxAdvertisements,
  updateOlxAdvertisement,
} from "./olxService.js";
import { olxCategories } from "../models/olxModel.js";
import {
  createNewSubscription,
  deleteSubscriptionByUserIdAndIndex,
  getAllUserSubscriptions,
  getListSubscriptionByUserId,
  getSubscriptionByUserIdAndIndex,
} from "../models/subscriptionModel.js";
import { createNewProduct, deleteProductsByUserIdByCategoryBySearchKeyWords, getProductById } from "../models/productModel.js";

bot.on("polling_error", (msg) => console.log(`polling_error:${msg}`));

bot.on("webhook_error", (msg) => console.log(`webhook_error: ${msg}`));

bot.on('error', (error) => {
  if (error.message.includes('socket hang up')) {
    console.error('Socket hang up error occurred:', error);
  } else {
    console.error('Error occurred:', error);
  }
});

bot.on("message", async (msg) => {
  const userId = msg.from.id;
  const messageText = msg.text.toString().toLowerCase();
  const chatId = msg.chat.id;

  if (!isUserAllowed(userId)) {
    bot.sendMessage(chatId, "Sorry, you are not authorized to use this bot.");
    return;
  }

  switch (messageText) {
    case "/hello":
      return bot.sendMessage(
        userId,
        `–ü—Ä–∏–≤—ñ—Ç, ${msg.from.first_name}\n–ù–µ—Ö–∞–π —Ü–µ–π –¥–µ–Ω—å —Å—Ç–∞–Ω–µ –Ω–∞–π–∫—Ä–∞—â–∏–º —É —Ç–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ.`
      );
    case "/add":
      bot.sendMessage(
        chatId,
        "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à—ñ—Ç—å,\n–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n/add category nike \n/add category air force"
      );
      return;
    case "/delete":
      bot.sendMessage(chatId, "–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à—ñ—Ç—å:\n/delete <id>");
      return;
    case "/list":
      const userSubscriptions = getListSubscriptionByUserId(userId);

      if (!userSubscriptions || userSubscriptions.length === 0) {
        bot.sendMessage(
          chatId,
          "üëÄ –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:\n–ù–∞–∂–∞–ª—å, –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫"
        );
        return;
      }

      const temp = [];
      for (let i = 0; i < userSubscriptions.length; i++) {
        temp.push(`${i}. ${userSubscriptions[i].join(" ")}`);
      }

      bot.sendMessage(
        chatId,
        `üëÄ –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:\n${
          userSubscriptions ? temp.join("\n") : ""
        }\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ /delete –∏ –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/delete 1`
      );
      return;
    case "/categories":
      const categories = Object.keys(olxCategories).join("\n");
      bot.sendMessage(
        chatId,
        `–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:\n\n${categories}\n\np.s. –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó`
      );
      return;
    case "/update":
      bot.sendMessage(
        chatId,
        `–©–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É —ñ –ø–æ–ª—É—á–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/update 1, –¥–µ '1' –Ω–æ–º–µ—Ä –≤–∞—à–æ–π –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–∏–≤. /list`
      );
      return;
  }

  if (messageText.startsWith("/delete")) {
    const splitMessageText = messageText.split(" ");

    const userSubscription = getSubscriptionByUserIdAndIndex(
      userId,
      splitMessageText[1]
    );

    if (!userSubscription) {
      return bot.sendMessage(
        chatId,
        "Grammar Nazi, –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
      );
    }

    const isProductsListRemoved =
      deleteProductsByUserIdByCategoryBySearchKeyWords(
        userId,
        userSubscription[0],
        userSubscription[1]
      );
    const isSubscriptionRemoved = deleteSubscriptionByUserIdAndIndex(
      userId,
      splitMessageText[1]
    );

    return bot.sendMessage(
      chatId,
      `–ü—ñ–¥–ø–∏—Å–∫—É –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ ${
        isSubscriptionRemoved && isProductsListRemoved
          ? "—É—Å–ø—ñ—à–Ω–æ"
          : "–Ω–µ —É—Å–ø—ñ—à–Ω–æ (—Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑)"
      }`
    );
  }

  if (messageText.startsWith("/update")) {
    const splitMessageText = messageText.split(" ");

    const userSubscription = getSubscriptionByUserIdAndIndex(
      userId,
      splitMessageText[1]
    );

    if (!userSubscription) {
      bot.sendMessage(
        chatId,
        "Grammar Nazi, –Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –∞–±–æ —É—Å–µ –∑–ª–∞–º–∞–ª–æ—Å—è –∫ —Ö—É—è–º"
      );
      return;
    }

    UpdateUserSubscriptionAsync(chatId, userSubscription);
  }

  if (messageText.startsWith("/add")) {
    // ["/add", "category", "search key words"]
    const splitMessageText = messageText.split(" ");
    const category = splitMessageText[1];
    const searchKeyWords = splitMessageText.slice(2);

    const categoryUrlPath = olxCategories[category];

    if (!categoryUrlPath) {
      bot.sendMessage(chatId, "Grammar Nazi, –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ");
      return;
    }

    if (searchKeyWords.length === 0) {
      bot.sendMessage(chatId, "Grammar Nazi, –∑–∞–±—É–≤ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É");
      return;
    }

    try {
      const products = await searchOlxAdvertisements(
        categoryUrlPath,
        searchKeyWords
      );

      products.forEach(({ id, link, title }) =>
        createNewProduct(userId, category, searchKeyWords, { id, link, title })
      );

      const categorySearchKeyWords = splitMessageText.slice(1);

      createNewSubscription(userId, categorySearchKeyWords);

      bot.sendMessage(
        chatId,
        `–£—Å–ø—ñ—à–Ω–æ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –ø—ñ–¥–ø–∏—Å–∫—É\n${categorySearchKeyWords.join(" ")}`
      );
    } catch (error) {
      if (error.message == "–ó–∞ —Ü–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω—å") {
        bot.sendMessage(userId, error.message);
      } else {
        console.error(
          `userId: ${userId} msg: ${messageText}\n${error.message}`
        );
      }
    }
  }
});

async function UpdateUserSubscriptionAsync(userId, userSubscription) {
  const categoryUrlPath = olxCategories[userSubscription[0]];
  const searchKeyWords = userSubscription.slice(1);

  try {
    const updatedProducts = await updateOlxAdvertisement(
      categoryUrlPath,
      searchKeyWords,
      true
    );

    if (updatedProducts.length == 0) {
      return;
    }

    const newProduct = [];

    for (let i = 0; i < updatedProducts.length; i++) {
      if (!getProductById(userId, userSubscription[0], searchKeyWords, updatedProducts[i].id)) {
        const { id, link, title } = updatedProducts[i];
        newProduct.push(
          createNewProduct(
            userId,
            userSubscription[0],
            searchKeyWords,
            { id, link, title },
            true
          )
        );
      }
    }

    if (newProduct.length == 0) {
      return;
    }

    const message = newProduct
      .map((item, index) => `${index}. [${item.title}](${item.link})`)
      .join("\n\n");
    return bot.sendMessage(userId, message, { parse_mode: "Markdown" });
  } catch (error) {
    console.error(`userId: ${userId} \n${error.message}`);
  }
}

export function UpdateUserSubscriptions() {
  const usersSubs = getAllUserSubscriptions();

  for (const userId in usersSubs) {
    const userSubscriptions = usersSubs[userId];
    for (const prop in userSubscriptions) {
      if (userSubscriptions[prop].length > 0) {
        userSubscriptions[prop].forEach(async (subs) => {
          await UpdateUserSubscriptionAsync(userId, subs);
        });
      }
    }
  }
}

export default bot;
