import bot, { isUserAllowed } from "./../models/telegramBotModel.js";
import { scrapeOLX, updateOlxAdvertisement } from "./olxService.js";
import { olxCategories } from "../models/olxModel.js";
import {
  createNewSubscription,
  getListSubscriptionByUserId,
  getSubscriptionByUserIdAndIndex,
} from "../models/subscriptionModel.js";

bot.on("message", (msg) => {
  const userID = msg.from.id;
  const messageText = msg.text.toString().toLowerCase();
  const chatId = msg.chat.id;

  if (!isUserAllowed(userID)) {
    bot.sendMessage(chatId, "Sorry, you are not authorized to use this bot.");
    return;
  }

  switch (messageText) {
    case "/add":
      bot.sendMessage(
        chatId,
        "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à—ñ—Ç—å,\n–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n/add <category> nike \n/add <category> air force"
      );
      return;
    case "/list":
      const userSubscriptions = getListSubscriptionByUserId(userID);

      if (!userSubscriptions) {
        bot.sendMessage(
          chatId,
          "üëÄ –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:\n–ù–∞–∂–∞–ª—å, –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫"
        );
        return;
      }

      const temp = [];
      for (let i = 0; i < userSubscriptions.length; i++) {
        temp.push(`${i}. ${userSubscriptions[i].join(" ")}`);
      }

      bot.sendMessage(
        chatId,
        `üëÄ –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:\n${
          userSubscriptions ? temp.join("\n") : ""
        }\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ /delete –∏ –Ω–æ–º–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/delete 1`
      );
      return;
    case "/categories":
      const categories = Object.keys(olxCategories).join("\n");
      bot.sendMessage(
        chatId,
        `–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:\n\n${categories}\n\np.s. –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó`
      );
      return;
    case "/update":
      bot.sendMessage(
        chatId,
        `–©–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É —ñ –ø–æ–ª—É—á–∏—Ç–∏ –Ω–æ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/update 1, –¥–µ '1' –Ω–æ–º–µ—Ä –≤–∞—à–æ–π –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–∏–≤. /list`
      );
      return;
  }

  if (messageText.startsWith("/update")) {
    const splitMessageText = messageText.split(" ");

    const userSubscription = getSubscriptionByUserIdAndIndex(
      userID,
      splitMessageText[1]
    );

    if (!userSubscription) {
      bot.sendMessage(
        chatId,
        "Grammar Nazi, –Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –∞–±–æ —É—Å–µ –∑–ª–∞–º–∞–ª–æ—Å—è –∫ —Ö—É—è–º"
      );
      return;
    }

    const categoryUrlPath = olxCategories[userSubscription[0]];
    const searchKeyWords = userSubscription.slice(1);

    updateOlxAdvertisement(categoryUrlPath, searchKeyWords, true)
      .then((result) => {
        const amountNewOrders = result.length;
        if (amountNewOrders === 0) {
          bot.sendMessage(
            chatId,
            `–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –ø–æ ${userSubscription.join(" ")}`
          );
          return;
        }

        const message = result
          .map((item, index) => `${index}. [${item.title}](${item.link})`)
          .join("\n\n");
        bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
      })
      .catch((e) => bot.sendMessage(chatId, e.message));
  }

  if (messageText.startsWith("/add")) {
    // ["/add", "category", "search key words"]
    const splitMessageText = messageText.split(" ");

    const categoryUrlPath = olxCategories[splitMessageText[1]];
    const searchKeyWords = splitMessageText.slice(2);

    if (!categoryUrlPath) {
      bot.sendMessage(chatId, "Grammar Nazi, –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–æ");
      return;
    }

    if (searchKeyWords.length === 0) {
      bot.sendMessage(chatId, "Grammar Nazi, –∑–∞–±—É–≤ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É");
      return;
    }

    scrapeOLX(categoryUrlPath, searchKeyWords)
      .then((result) => {
        createNewSubscription(userID, splitMessageText.slice(1));
        bot.sendMessage(
          chatId,
          `–£—Å–ø—ñ—à–Ω–æ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ ${result} –æ–≥–æ–ª–æ—à–µ–Ω—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö`
        );
      })
      .catch((e) => bot.sendMessage(chatId, e.message));
  }
});

export default bot;
